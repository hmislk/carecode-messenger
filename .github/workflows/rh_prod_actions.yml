name: Ruhunu Prod Deployment

on:
  push:
    branches:
      - ruhunu-prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build with Java Compiler
        run: |
          javac -cp "lib/ESMSlibV4.0.jar:lib/jakarta.ws.rs-api-3.1.0.jar:lib/jakarta.enterprise.cdi-api-4.1.0.jar:lib/jakarta.inject-api-2.0.1.jar" -d target/WEB-INF/classes src/java/org/carecode/sms/mobitel/controllers/*
          mkdir target/WEB-INF/lib
          cp lib/ESMSlibV4.0.jar target/WEB-INF/lib/
          jar -cvf target/ccmm.war -C target/ .
          jar tf target/ccmm.war

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./

      - name: Deploy to Payara
        env:
          SERVER_IP: ${{ secrets.RUHUNU_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.RUHUNU_PROD_SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.RUHUNU_PROD_SSH_PRIVATE_KEY }}
          PAYARA_ADMIN_PASS: ${{ secrets.RUHUNU_PROD_PAYARA_ADMIN_PASS }}
        run: |
          # Add SSH private key to the SSH agent
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Variables
          WAR_NAME="ccmm.war"
          WAR_DIR="/home/appuser/app/latest"
          APP_NAME="ccmm"
          # SUBDOMAIN="comm"

          # Ensure deployment directory exists
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo mkdir -p $WAR_DIR
            sudo chown -R appuser:appuser /home/appuser/app/latest
            sudo su - appuser
            cd $WAR_DIR

            # Remove old backup if it exists
            if [ -f $WAR_NAME.old ]; then
              rm $WAR_NAME.old
            fi

            # If the current WAR file exists, back it up
            if [ -f $WAR_NAME ]; then
              mv $WAR_NAME $WAR_NAME.old
            fi
          "

          # Copy new WAR file to the server
          rsync -aL --progress -e "ssh -i private_key.pem" ./*.war $SERVER_USER@$SERVER_IP:/tmp/$WAR_NAME

          # Move the file to /home/appuser/app/latest/ and set permissions
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo mv /tmp/$WAR_NAME $WAR_DIR/
            sudo chown appuser:appuser $WAR_DIR/$WAR_NAME
          "

          # Deploy the WAR using asadmin
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo su - appuser
            echo 'AS_ADMIN_PASSWORD=$PAYARA_ADMIN_PASS' > /tmp/payara-admin-pass.txt
            /opt/payara5/bin/asadmin --user admin --passwordfile /tmp/payara-admin-pass.txt undeploy $APP_NAME || true
            /opt/payara5/bin/asadmin --user admin --passwordfile /tmp/payara-admin-pass.txt deploy --force=true --contextroot $APP_NAME $WAR_DIR/$WAR_NAME
            rm /tmp/payara-admin-pass.txt
          "

          # Validate if the application is running
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo su - appuser
            echo 'AS_ADMIN_PASSWORD=$PAYARA_ADMIN_PASS' > /tmp/payara-admin-pass.txt
            if /opt/payara5/bin/asadmin --user admin --passwordfile /tmp/payara-admin-pass.txt list-applications | grep -q '$APP_NAME'; then
              echo 'Application is running.'
            else
              echo 'Application failed to start.'
            fi
            rm /tmp/payara-admin-pass.txt
          "

          # Cleanup
          rm -f private_key.pem
